<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pip | Hackers Gonna Hack]]></title>
  <link href="http://www.jeffknupp.com/blog/categories/pip/atom.xml" rel="self"/>
  <link href="http://www.jeffknupp.com/"/>
  <updated>2012-07-10T06:02:38-04:00</updated>
  <id>http://www.jeffknupp.com/</id>
  <author>
    <name><![CDATA[Jeff Knupp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Starting a Django Project the Right Way]]></title>
    <link href="http://www.jeffknupp.com/blog/2012/02/09/starting-a-django-project-the-right-way/"/>
    <updated>2012-02-09T09:13:00-05:00</updated>
    <id>http://www.jeffknupp.com/blog/2012/02/09/starting-a-django-project-the-right-way</id>
    <content type="html"><![CDATA[<p>One of the things I wish I had known when starting my Django project for
<a href="http://www.illestrhyme.com">IllestRhyme</a> was "How do I start a <em>real</em>
Django project". As in, one that's actually going to be used and
developed more, not the toy project from the (admittedly execellent)
Django documentation.</p>

<p>Having just gone through this process again for my new site, I wanted to
share the knowledge I've gained about how to properly start a project in
Django. By the end of this post, you will have</p>

<pre><code>1. A fully functional Django project
2. All resources under source control (with git)
3. An environment independet install of your project (using virtualenv)
4. Automated deployment and testing (using Fabric)
5. Automatic database migrations (using South)
6. A solid start to your new site
</code></pre>

<p>None of these steps, except for perhaps the first, are covered in the
official tutorial. They should be. If you're looking to start a new,
production ready Django project, look no further.</p>

<!--more-->


<h2>Prerequisites</h2>

<p>A working knowledge of Python is assumed. Also, some prior experience
with Django would be incredibly helpful, but not strictly necessary.
You'll need <a href="http://www.git-scm.com">git</a> for version control. That's
it!</p>

<h2>Preparing To Install</h2>

<p>I'm assuming you have Python installed. If you don't head over to
<a href="http://www.python.org">python.org</a> and find the install instructions
for your architecture/os. I'll be running on a 64-bit Ubuntu server installation hosted by <a href="http://www.linode.com/?r=ae1808f234f8e219de24842336fada09ef81d52f">Linode</a>, with whom I'm very happy.</p>

<p>So, what's the first step? Install Django, right? Not quite. One common
problem with installing packages directly to your current site-packages
area is that, if you have more than one project or use Python on your
machine for things other than Django, you may run into dependency
issues between your applications and the installed packages. For this
reason, we'll be using
<a href="http://pypi.python.org/pypi/virtualenv">virtualenv</a> to manage our
Django installation. This is common, and recommended, practice among
Python and Django users.</p>

<p>After installing virtualenv in whatever way you want, create a new
virtualenv, which we'll call 'env', using the following:</p>

<pre><code>$ virtualenv env
</code></pre>

<p>or, if virtualenv isn't in your $PATH (though it should be):</p>

<pre><code>$ python virtualenv.py --distribute env
</code></pre>

<p>Now that we have a virtualenv environment, we need to <em>activate</em> it.
This sets up various envrionment variables to effectively bypass the
system's Python install and uses our <code>env</code> one instead. Activate like
so:</p>

<pre><code>$ source ./env/bin/activate
</code></pre>

<p>You should see <code>(env) $</code> at your prompt, letting you know that you're
running under the 'env' virtualenv install. At any time, just type:</p>

<pre><code>$ deactivate
</code></pre>

<p>to stop using virtualenv.</p>

<h2>Installing Django</h2>

<p>"Wait, 'Installing Django'? I already have Django installed!" Fantastic.
You aren't going to use it. Instead, we'll use one managed by virtualenv
that can't be messed up by other users (or yourself) working elsewhere
on the machine. To install Django under virtual env, just type:</p>

<pre><code>$ pip install django
</code></pre>

<p>This should give you the latest version of Django which will be installed in your
virtualenv area. You can confirm this by doing:</p>

<pre><code>$ which django-admin.py
</code></pre>

<p>Which should report an area under our <code>env</code> directory. If it doesn't,
make sure you see <code>(env)</code> at your prompt. If you don't, you didn't
<code>$ source ./env/bin/activate</code>.</p>

<h2>Setting Up The Project</h2>

<p>Before we actually start the project, make sure you have git installed.
It's available via package installation on most systems. If it isn't for
yours, follow the directions on <a href="http://www.git-scm.com">git-scm</a> to
install via source (not that difficult).</p>

<p>Let's start the project via django-admin:</p>

<pre><code>$ django-admin.py startproject myproject
</code></pre>

<p>This creates the <code>myproject</code> directory. Don't go there yet.</p>

<h2>Source Control Using Git</h2>

<p>Even though we haven't actually done anything besides starting a
project, we know we're going to want everything under source
control. We have two sets of 'things' we're going to be commiting: our
Django project files <em>and our virtualenv install</em>. I can already hear
the comments pouring in, but committing your virtualenv install means
you have a <strong>totally reproducible environment</strong> under source control.
This can be critical if you lose your machine or accidentally wipe the
directory.</p>

<p>Our current directory should show two directories: <code>env</code> and
<code>myproject</code>. Since we'll be tracking both of these in git, we'll
initialize our repository here using:</p>

<pre><code>$ git init
</code></pre>

<p>This creates a git repository in the current directory. Lets stage all of
our files to git to be committed.</p>

<pre><code>$ git add .
</code></pre>

<p>Now we actually commit them to our new repo:</p>

<pre><code>$ git commit -a -m 'Initial commit of myproject'
</code></pre>

<p>If you plan on using a service like Github or Bitbucket, now would be a
good time to push to them.</p>

<h2>Using South for Database Migrations</h2>

<p>One of the most frustrating things in a vanilla Django install is
managing changes to models and the associated changes to the database.
With the help of <a href="http://south.aeracode.org">South</a>, you can realistically create an entire
application without ever writing database specific code. Changes to your
models are detected and automatically made in the database through a
<em>migration file</em> that South creates. This lets you both migrate the
database forward for your new change and <strong>backwards</strong> to undo a change
or series of changes. It makes your life so much easier, it's a wonder
it's not included in the Django distribution (there has been some talk
of including a database migration tool in Django, but it hasn't happened
yet).</p>

<p>Still under our <code>(env)</code> virtualenv environment, install South like so:</p>

<pre><code>$ pip install south
</code></pre>

<p>We setup South by adding it to our INSTALLED_APS in the <code>settings.py</code>
file for the project. Add that now, as well as your database settings
for the project, then run <code>python manage.py syncdb</code>.
You'll be prompted for a superuser name and password (which you can go
ahead and enter). More importantly, South has setup the database with
the tables it needs.</p>

<p>You may have noticed that we just ran <code>syncdb</code> without having adding an app to the project. We do this first so that South is installed from the beginning. All migrations to our own apps will be done using South, including the initial migration.</p>

<p>Since we've just made some pretty big changes, now would be a good time
to commit to git. You should get used to committing frequently, as the
more granular the commit, the more freedom you have in choosing
something to revert to if things go wrong.</p>

<p>To commit, first add any untracked files:</p>

<pre><code>$ git add .
</code></pre>

<p>Git users may notice I'm not adding specific files but rather everything
under our main directory. That's becuase, to this point, <em>there isn't
anything we don't want to commit</em>. Let's commit our changes using:</p>

<pre><code>$ git commit -a -m 'Added South for database migrations'
</code></pre>

<h2>Creating Our App</h2>

<p>Use <code>manage.py</code> to create an app in the normal way (<code>python manage.py
startapp myapp</code>) and add it as an INSTALLED_APP. The first thing we'll do, before adding models, is
tell South we want to use it for migrations:</p>

<pre><code>$ python manage.py schemamigration myapp --initial
</code></pre>

<p>This creates a migration file that can be used to apply our changes (if
we had any) and also <em>revert</em> them. We use the migration file to  <em>migrate</em> the database changes (even though there are none)
using :</p>

<pre><code>$ python manage.py migrate myapp
</code></pre>

<p>South is smart enough to know where to look for migration files, as well
as remember what was the last migration we did. You can specify
individual migration files, but it's usually not necessary.</p>

<p>When we eventually make changes to our model, we ask South to create a
migration using:</p>

<pre><code>$ python manage.py schemamigration myapp --auto
</code></pre>

<p>This will inspect the models in <code>myapp</code> and automatically add, delete,
or modify the database tables accordingly.</p>

<h2>Our Development Area</h2>

<p>One of the things you should get used to is doing development in a
separate area, not where you're serving your files from, for obvious
reasons. Git makes this simple and also helps with deployments.
Create a directory somewhere other than where <code>myproject</code> is installed
for your development area (I just call it <code>dev</code>).</p>

<p>In your development directory, clone the current project using git:</p>

<pre><code>$ git clone /path/to/my/project/
</code></pre>

<p>Git will create an exact copy of the <strong>entire</strong> repository. All changes,
branches, and history will be available here. From here on out, you
should be working from your development directory.</p>

<p>Since branching with git is so easy and cheap, create branches
as you work on new, orthogonal changes to your site. Do so by typing:</p>

<pre><code>$ git checkout -b &lt;branchname&gt;
</code></pre>

<p>Which will both create a new branch named <branchname> and check it out.
Almost all of your development should be done on a branch, so that
master mimics the current production master and can be used for recovery at
any time.</p>

<h2>Using Fabric for Deployment</h2>

<p>So we have the makings of a Django application. How do we deploy it?
Thanks to readers of the blog, I'm a recent convert to <a href="http://www.fabfile.org">Fabric</a>, a fantastic tool perfectly suited to our deployment needs. Install Fabric to our virtualenv like so:</p>

<pre><code>$ pip install fabric
</code></pre>

<p>Fabric expects a file , <em>fabfile.py</em>, to define all of the actions we
can take. Let's create that now. Put the following in your <code>fabfile.py</code>
in the <code>myproject</code> directory:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">local</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">prepare_deployment</span><span class="p">(</span><span class="n">branch_name</span><span class="p">):</span>
</span><span class='line'>    <span class="n">local</span><span class="p">(</span><span class="s">&#39;python manage.py test myapp&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">local</span><span class="p">(</span><span class="s">&#39;git add -p &amp;amp;&amp;amp; git commit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">local</span><span class="p">(</span><span class="s">&#39;git checkout master &amp;amp;&amp;amp; git merge &#39;</span> <span class="o">+</span> <span class="n">branchname</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will run the tests, commit your branch change, and merge them into
master. At this point, a simple "git pull" in your production area
becomes your deployment. Lets add a bit more to actually deploy. Add
this to your fabfile.py:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">lcd</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">deploy</span><span class="p">():</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">lcd</span><span class="p">(</span><span class="s">&#39;/path/to/my/prod/area/&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">local</span><span class="p">(</span><span class="s">&#39;git pull /my/path/to/dev/area/&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">local</span><span class="p">(</span><span class="s">&#39;python manage.py migrate myapp&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">local</span><span class="p">(</span><span class="s">&#39;python manage.py test myapp&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">local</span><span class="p">(</span><span class="s">&#39;/my/command/to/restart/webserver&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
This will pull your changes from the development master branch, run any
migrations you've made, run your tests, and restart your webserver.
All in one simple command from the command line. If one of those steps
fails, the script stops and reports what happened. Once you fix the
issue, there is no need to run the steps manually. Simply rerun the
deploy command and all will be well.</p>

<p>So now that we have our <code>fabfile.py</code> created, how do we actually deploy?
Simple. Just run:</p>

<pre><code> $ fab prepare_deployment
 $ fab deploy
</code></pre>

<p>Technically, these could be combined into a single command, but I find
it's better to explicitly prepare your deployment and then deploy as it
makes you focus a bit more on what you're doign.</p>

<h2>Enjoy Your New Django Application</h2>

<p>That's it! You're ready to start your actual development. If you do a
lot of Django development, just dump all of the commands above into a
fabfile and make creating a proper Django app a one step process. I have
one which I'll upload to my github account later today. If you have any
questions or corrections, or think there's a tool/step I missed, feel
free to email me at <a href="mailto:jknupp@gmail.com">jknupp@gmail.com</a> or leave
a comment below. <a href="http://www.twitter.com/jeffknupp">Follow me on Twitter</a> to get all of the latest blog updates!</p>
]]></content>
  </entry>
  
</feed>
